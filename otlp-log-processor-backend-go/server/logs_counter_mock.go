// Code generated by MockGen. DO NOT EDIT.
// Source: logs_service.go
//
// Generated by this command:
//
//	mockgen -typed -source=logs_service.go -destination=logs_counter_mock.go -package=server -mock_names=logsCounter=LogsCounter . logsCounter
//

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	v1 "go.opentelemetry.io/proto/otlp/logs/v1"
	gomock "go.uber.org/mock/gomock"
)

// LogsCounter is a mock of logsCounter interface.
type LogsCounter struct {
	ctrl     *gomock.Controller
	recorder *LogsCounterMockRecorder
	isgomock struct{}
}

// LogsCounterMockRecorder is the mock recorder for LogsCounter.
type LogsCounterMockRecorder struct {
	mock *LogsCounter
}

// NewLogsCounter creates a new mock instance.
func NewLogsCounter(ctrl *gomock.Controller) *LogsCounter {
	mock := &LogsCounter{ctrl: ctrl}
	mock.recorder = &LogsCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *LogsCounter) EXPECT() *LogsCounterMockRecorder {
	return m.recorder
}

// count mocks base method.
func (m *LogsCounter) count(arg0 context.Context, arg1 []*v1.ResourceLogs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "count", arg0, arg1)
}

// count indicates an expected call of count.
func (mr *LogsCounterMockRecorder) count(arg0, arg1 any) *LogsCountercountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "count", reflect.TypeOf((*LogsCounter)(nil).count), arg0, arg1)
	return &LogsCountercountCall{Call: call}
}

// LogsCountercountCall wrap *gomock.Call
type LogsCountercountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *LogsCountercountCall) Return() *LogsCountercountCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *LogsCountercountCall) Do(f func(context.Context, []*v1.ResourceLogs)) *LogsCountercountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *LogsCountercountCall) DoAndReturn(f func(context.Context, []*v1.ResourceLogs)) *LogsCountercountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// getAndReset mocks base method.
func (m *LogsCounter) getAndReset() map[string]int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getAndReset")
	ret0, _ := ret[0].(map[string]int64)
	return ret0
}

// getAndReset indicates an expected call of getAndReset.
func (mr *LogsCounterMockRecorder) getAndReset() *LogsCountergetAndResetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getAndReset", reflect.TypeOf((*LogsCounter)(nil).getAndReset))
	return &LogsCountergetAndResetCall{Call: call}
}

// LogsCountergetAndResetCall wrap *gomock.Call
type LogsCountergetAndResetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *LogsCountergetAndResetCall) Return(arg0 map[string]int64) *LogsCountergetAndResetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *LogsCountergetAndResetCall) Do(f func() map[string]int64) *LogsCountergetAndResetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *LogsCountergetAndResetCall) DoAndReturn(f func() map[string]int64) *LogsCountergetAndResetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockcountPrinter is a mock of countPrinter interface.
type MockcountPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockcountPrinterMockRecorder
	isgomock struct{}
}

// MockcountPrinterMockRecorder is the mock recorder for MockcountPrinter.
type MockcountPrinterMockRecorder struct {
	mock *MockcountPrinter
}

// NewMockcountPrinter creates a new mock instance.
func NewMockcountPrinter(ctrl *gomock.Controller) *MockcountPrinter {
	mock := &MockcountPrinter{ctrl: ctrl}
	mock.recorder = &MockcountPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcountPrinter) EXPECT() *MockcountPrinterMockRecorder {
	return m.recorder
}

// print mocks base method.
func (m *MockcountPrinter) print(arg0 map[string]int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "print", arg0)
}

// print indicates an expected call of print.
func (mr *MockcountPrinterMockRecorder) print(arg0 any) *MockcountPrinterprintCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "print", reflect.TypeOf((*MockcountPrinter)(nil).print), arg0)
	return &MockcountPrinterprintCall{Call: call}
}

// MockcountPrinterprintCall wrap *gomock.Call
type MockcountPrinterprintCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockcountPrinterprintCall) Return() *MockcountPrinterprintCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockcountPrinterprintCall) Do(f func(map[string]int64)) *MockcountPrinterprintCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockcountPrinterprintCall) DoAndReturn(f func(map[string]int64)) *MockcountPrinterprintCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

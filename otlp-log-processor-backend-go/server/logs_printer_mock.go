// Code generated by MockGen. DO NOT EDIT.
// Source: logs_service.go
//
// Generated by this command:
//
//	mockgen -typed -source=logs_service.go -destination=logs_printer_mock.go -package=server -mock_names=countPrinter=CountPrinter . countPrinter
//

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	v1 "go.opentelemetry.io/proto/otlp/logs/v1"
	gomock "go.uber.org/mock/gomock"
)

// MocklogsCounter is a mock of logsCounter interface.
type MocklogsCounter struct {
	ctrl     *gomock.Controller
	recorder *MocklogsCounterMockRecorder
	isgomock struct{}
}

// MocklogsCounterMockRecorder is the mock recorder for MocklogsCounter.
type MocklogsCounterMockRecorder struct {
	mock *MocklogsCounter
}

// NewMocklogsCounter creates a new mock instance.
func NewMocklogsCounter(ctrl *gomock.Controller) *MocklogsCounter {
	mock := &MocklogsCounter{ctrl: ctrl}
	mock.recorder = &MocklogsCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklogsCounter) EXPECT() *MocklogsCounterMockRecorder {
	return m.recorder
}

// count mocks base method.
func (m *MocklogsCounter) count(arg0 context.Context, arg1 []*v1.ResourceLogs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "count", arg0, arg1)
}

// count indicates an expected call of count.
func (mr *MocklogsCounterMockRecorder) count(arg0, arg1 any) *MocklogsCountercountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "count", reflect.TypeOf((*MocklogsCounter)(nil).count), arg0, arg1)
	return &MocklogsCountercountCall{Call: call}
}

// MocklogsCountercountCall wrap *gomock.Call
type MocklogsCountercountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocklogsCountercountCall) Return() *MocklogsCountercountCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocklogsCountercountCall) Do(f func(context.Context, []*v1.ResourceLogs)) *MocklogsCountercountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocklogsCountercountCall) DoAndReturn(f func(context.Context, []*v1.ResourceLogs)) *MocklogsCountercountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// getAndReset mocks base method.
func (m *MocklogsCounter) getAndReset() map[string]int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getAndReset")
	ret0, _ := ret[0].(map[string]int64)
	return ret0
}

// getAndReset indicates an expected call of getAndReset.
func (mr *MocklogsCounterMockRecorder) getAndReset() *MocklogsCountergetAndResetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getAndReset", reflect.TypeOf((*MocklogsCounter)(nil).getAndReset))
	return &MocklogsCountergetAndResetCall{Call: call}
}

// MocklogsCountergetAndResetCall wrap *gomock.Call
type MocklogsCountergetAndResetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocklogsCountergetAndResetCall) Return(arg0 map[string]int64) *MocklogsCountergetAndResetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocklogsCountergetAndResetCall) Do(f func() map[string]int64) *MocklogsCountergetAndResetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocklogsCountergetAndResetCall) DoAndReturn(f func() map[string]int64) *MocklogsCountergetAndResetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CountPrinter is a mock of countPrinter interface.
type CountPrinter struct {
	ctrl     *gomock.Controller
	recorder *CountPrinterMockRecorder
	isgomock struct{}
}

// CountPrinterMockRecorder is the mock recorder for CountPrinter.
type CountPrinterMockRecorder struct {
	mock *CountPrinter
}

// NewCountPrinter creates a new mock instance.
func NewCountPrinter(ctrl *gomock.Controller) *CountPrinter {
	mock := &CountPrinter{ctrl: ctrl}
	mock.recorder = &CountPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *CountPrinter) EXPECT() *CountPrinterMockRecorder {
	return m.recorder
}

// print mocks base method.
func (m *CountPrinter) print(arg0 map[string]int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "print", arg0)
}

// print indicates an expected call of print.
func (mr *CountPrinterMockRecorder) print(arg0 any) *CountPrinterprintCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "print", reflect.TypeOf((*CountPrinter)(nil).print), arg0)
	return &CountPrinterprintCall{Call: call}
}

// CountPrinterprintCall wrap *gomock.Call
type CountPrinterprintCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CountPrinterprintCall) Return() *CountPrinterprintCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CountPrinterprintCall) Do(f func(map[string]int64)) *CountPrinterprintCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CountPrinterprintCall) DoAndReturn(f func(map[string]int64)) *CountPrinterprintCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
